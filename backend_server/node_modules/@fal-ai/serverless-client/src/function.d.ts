import { EnqueueResult, QueueStatus } from '@fal-ai/serverless-client/src/types';
/**
 * The function input and other configuration when running
 * the function, such as the HTTP method to use.
 */
type RunOptions<Input> = {
    /**
     * The path to the function, if any. Defaults to ``.
     */
    readonly path?: string;
    /**
     * The function input. It will be submitted either as query params
     * or the body payload, depending on the `method`.
     */
    readonly input?: Input;
    /**
     * The HTTP method, defaults to `post`;
     */
    readonly method?: 'get' | 'post' | 'put' | 'delete' | string;
    /**
     * If `true`, the function will automatically upload any files
     * (i.e. instances of `Blob`) or data:uri in the input.
     *
     * You can disable this behavior by setting it to `false`, which
     * is useful in cases where you want to upload the files yourself
     * or use small data:uri in the input.
     */
    readonly autoUpload?: boolean;
};
/**
 * Builds the final url to run the function based on its `id` or alias and
 * a the options from `RunOptions<Input>`.
 *
 * @private
 * @param id the function id or alias
 * @param options the run options
 * @returns the final url to run the function
 */
export declare function buildUrl<Input>(id: string, options?: RunOptions<Input>): string;
/**
 * Runs a fal serverless function identified by its `id`.
 *
 * @param id the registered function revision id or alias.
 * @returns the remote function output
 */
export declare function run<Input, Output>(id: string, options?: RunOptions<Input>): Promise<Output>;
/**
 * Subscribes to updates for a specific request in the queue.
 *
 * @param id - The ID or URL of the function web endpoint.
 * @param options - Options to configure how the request is run and how updates are received.
 * @returns A promise that resolves to the result of the request once it's completed.
 */
export declare function subscribe<Input, Output>(id: string, options?: RunOptions<Input> & QueueSubscribeOptions): Promise<Output>;
/**
 * Options for subscribing to the request queue.
 */
type QueueSubscribeOptions = {
    /**
     * The interval (in milliseconds) at which to poll for updates.
     * If not provided, a default value of `1000` will be used.
     */
    pollInterval?: number;
    /**
     * Callback function that is called when a request is enqueued.
     * @param requestId - The unique identifier for the enqueued request.
     */
    onEnqueue?: (requestId: string) => void;
    /**
     * Callback function that is called when the status of the queue changes.
     * @param status - The current status of the queue.
     */
    onQueueUpdate?: (status: QueueStatus) => void;
    /**
     * If `true`, the response will include the logs for the request.
     * Defaults to `false`.
     */
    logs?: boolean;
};
/**
 * Options for submitting a request to the queue.
 */
type SubmitOptions<Input> = RunOptions<Input> & {
    /**
     * The URL to send a webhook notification to when the request is completed.
     * @see WebHookResponse
     */
    webhookUrl?: string;
};
type BaseQueueOptions = {
    /**
     * The unique identifier for the enqueued request.
     */
    requestId: string;
};
type QueueStatusOptions = BaseQueueOptions & {
    /**
     * If `true`, the response will include the logs for the request.
     * Defaults to `false`.
     */
    logs?: boolean;
};
/**
 * Represents a request queue with methods for submitting requests,
 * checking their status, retrieving results, and subscribing to updates.
 */
interface Queue {
    /**
     * Submits a request to the queue.
     *
     * @param id - The ID or URL of the function web endpoint.
     * @param options - Options to configure how the request is run.
     * @returns A promise that resolves to the result of enqueuing the request.
     */
    submit<Input>(id: string, options: SubmitOptions<Input>): Promise<EnqueueResult>;
    /**
     * Retrieves the status of a specific request in the queue.
     *
     * @param id - The ID or URL of the function web endpoint.
     * @param options - Options to configure how the request is run.
     * @returns A promise that resolves to the status of the request.
     */
    status(id: string, options: QueueStatusOptions): Promise<QueueStatus>;
    /**
     * Retrieves the result of a specific request from the queue.
     *
     * @param id - The ID or URL of the function web endpoint.
     * @param options - Options to configure how the request is run.
     * @returns A promise that resolves to the result of the request.
     */
    result<Output>(id: string, options: BaseQueueOptions): Promise<Output>;
    /**
     * @deprecated Use `fal.subscribe` instead.
     */
    subscribe<Input, Output>(id: string, options: RunOptions<Input> & QueueSubscribeOptions): Promise<Output>;
}
/**
 * The fal run queue module. It allows to submit a function to the queue and get its result
 * on a separate call. This is useful for long running functions that can be executed
 * asynchronously and not .
 */
export declare const queue: Queue;
export {};
