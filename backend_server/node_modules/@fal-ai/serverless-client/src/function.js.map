{"version":3,"file":"function.js","sourceRoot":"","sources":["../../../../libs/client/src/function.ts"],"names":[],"mappings":"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","sourcesContent":["import { getConfig } from './config';\nimport { dispatchRequest } from './request';\nimport { storageImpl } from './storage';\nimport { EnqueueResult, QueueStatus } from './types';\nimport { isUUIDv4, isValidUrl } from './utils';\n\n/**\n * The function input and other configuration when running\n * the function, such as the HTTP method to use.\n */\ntype RunOptions<Input> = {\n  /**\n   * The path to the function, if any. Defaults to ``.\n   */\n  readonly path?: string;\n\n  /**\n   * The function input. It will be submitted either as query params\n   * or the body payload, depending on the `method`.\n   */\n  readonly input?: Input;\n\n  /**\n   * The HTTP method, defaults to `post`;\n   */\n  readonly method?: 'get' | 'post' | 'put' | 'delete' | string;\n\n  /**\n   * If `true`, the function will automatically upload any files\n   * (i.e. instances of `Blob`) or data:uri in the input.\n   *\n   * You can disable this behavior by setting it to `false`, which\n   * is useful in cases where you want to upload the files yourself\n   * or use small data:uri in the input.\n   */\n  readonly autoUpload?: boolean;\n};\n\n/**\n * Builds the final url to run the function based on its `id` or alias and\n * a the options from `RunOptions<Input>`.\n *\n * @private\n * @param id the function id or alias\n * @param options the run options\n * @returns the final url to run the function\n */\nexport function buildUrl<Input>(\n  id: string,\n  options: RunOptions<Input> = {}\n): string {\n  const { host } = getConfig();\n  const method = (options.method ?? 'post').toLowerCase();\n  const path = (options.path ?? '').replace(/^\\//, '').replace(/\\/{2,}/, '/');\n  const input = options.input;\n  const params =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    method === 'get' && input ? new URLSearchParams(input as any) : undefined;\n  const queryParams = params ? `?${params.toString()}` : '';\n  const parts = id.split('/');\n\n  // if a fal.ai url is passed, just use it\n  if (isValidUrl(id)) {\n    const url = id.endsWith('/') ? id : `${id}/`;\n    return `${url}${path}${queryParams}`;\n  }\n\n  if (parts.length === 2 && isUUIDv4(parts[1])) {\n    return `https://${host}/trigger/${id}/${path}${queryParams}`;\n  }\n  return `https://${id}.${host}/${path}${queryParams}`;\n}\n\n/**\n * Runs a fal serverless function identified by its `id`.\n *\n * @param id the registered function revision id or alias.\n * @returns the remote function output\n */\nexport async function run<Input, Output>(\n  id: string,\n  options: RunOptions<Input> = {}\n): Promise<Output> {\n  const input =\n    options.input && options.autoUpload !== false\n      ? await storageImpl.transformInput(options.input)\n      : options.input;\n  return dispatchRequest<Input, Output>(\n    options.method ?? 'post',\n    buildUrl(id, options),\n    input as Input\n  );\n}\n\n/**\n * Subscribes to updates for a specific request in the queue.\n *\n * @param id - The ID or URL of the function web endpoint.\n * @param options - Options to configure how the request is run and how updates are received.\n * @returns A promise that resolves to the result of the request once it's completed.\n */\nexport async function subscribe<Input, Output>(\n  id: string,\n  options: RunOptions<Input> & QueueSubscribeOptions = {}\n): Promise<Output> {\n  const { request_id: requestId } = await queue.submit(id, options);\n  if (options.onEnqueue) {\n    options.onEnqueue(requestId);\n  }\n  return new Promise<Output>((resolve, reject) => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n    const pollInterval = options.pollInterval ?? 1000;\n    const poll = async () => {\n      try {\n        const requestStatus = await queue.status(id, {\n          requestId,\n          logs: options.logs ?? false,\n        });\n        if (options.onQueueUpdate) {\n          options.onQueueUpdate(requestStatus);\n        }\n        if (requestStatus.status === 'COMPLETED') {\n          clearTimeout(timeoutId);\n          try {\n            const result = await queue.result<Output>(id, { requestId });\n            resolve(result);\n          } catch (error) {\n            reject(error);\n          }\n          return;\n        }\n        timeoutId = setTimeout(poll, pollInterval);\n      } catch (error) {\n        clearTimeout(timeoutId);\n        reject(error);\n      }\n    };\n    poll().catch(reject);\n  });\n}\n\n/**\n * Options for subscribing to the request queue.\n */\ntype QueueSubscribeOptions = {\n  /**\n   * The interval (in milliseconds) at which to poll for updates.\n   * If not provided, a default value of `1000` will be used.\n   */\n  pollInterval?: number;\n\n  /**\n   * Callback function that is called when a request is enqueued.\n   * @param requestId - The unique identifier for the enqueued request.\n   */\n  onEnqueue?: (requestId: string) => void;\n\n  /**\n   * Callback function that is called when the status of the queue changes.\n   * @param status - The current status of the queue.\n   */\n  onQueueUpdate?: (status: QueueStatus) => void;\n\n  /**\n   * If `true`, the response will include the logs for the request.\n   * Defaults to `false`.\n   */\n  logs?: boolean;\n};\n\n/**\n * Options for submitting a request to the queue.\n */\ntype SubmitOptions<Input> = RunOptions<Input> & {\n  /**\n   * The URL to send a webhook notification to when the request is completed.\n   * @see WebHookResponse\n   */\n  webhookUrl?: string;\n};\n\ntype BaseQueueOptions = {\n  /**\n   * The unique identifier for the enqueued request.\n   */\n  requestId: string;\n};\n\ntype QueueStatusOptions = BaseQueueOptions & {\n  /**\n   * If `true`, the response will include the logs for the request.\n   * Defaults to `false`.\n   */\n  logs?: boolean;\n};\n\n/**\n * Represents a request queue with methods for submitting requests,\n * checking their status, retrieving results, and subscribing to updates.\n */\ninterface Queue {\n  /**\n   * Submits a request to the queue.\n   *\n   * @param id - The ID or URL of the function web endpoint.\n   * @param options - Options to configure how the request is run.\n   * @returns A promise that resolves to the result of enqueuing the request.\n   */\n  submit<Input>(\n    id: string,\n    options: SubmitOptions<Input>\n  ): Promise<EnqueueResult>;\n\n  /**\n   * Retrieves the status of a specific request in the queue.\n   *\n   * @param id - The ID or URL of the function web endpoint.\n   * @param options - Options to configure how the request is run.\n   * @returns A promise that resolves to the status of the request.\n   */\n  status(id: string, options: QueueStatusOptions): Promise<QueueStatus>;\n\n  /**\n   * Retrieves the result of a specific request from the queue.\n   *\n   * @param id - The ID or URL of the function web endpoint.\n   * @param options - Options to configure how the request is run.\n   * @returns A promise that resolves to the result of the request.\n   */\n  result<Output>(id: string, options: BaseQueueOptions): Promise<Output>;\n\n  /**\n   * @deprecated Use `fal.subscribe` instead.\n   */\n  subscribe<Input, Output>(\n    id: string,\n    options: RunOptions<Input> & QueueSubscribeOptions\n  ): Promise<Output>;\n}\n\n/**\n * The fal run queue module. It allows to submit a function to the queue and get its result\n * on a separate call. This is useful for long running functions that can be executed\n * asynchronously and not .\n */\nexport const queue: Queue = {\n  async submit<Input>(\n    id: string,\n    options: SubmitOptions<Input>\n  ): Promise<EnqueueResult> {\n    const { webhookUrl, path = '', ...runOptions } = options;\n    const query = webhookUrl\n      ? '?' + new URLSearchParams({ fal_webhook: webhookUrl }).toString()\n      : '';\n    return run(id, {\n      ...runOptions,\n      method: 'post',\n      path: '/fal/queue/submit' + path + query,\n    });\n  },\n  async status(\n    id: string,\n    { requestId, logs = false }: QueueStatusOptions\n  ): Promise<QueueStatus> {\n    return run(id, {\n      method: 'get',\n      path: `/fal/queue/requests/${requestId}/status`,\n      input: {\n        logs: logs ? '1' : '0',\n      },\n    });\n  },\n  async result<Output>(\n    id: string,\n    { requestId }: BaseQueueOptions\n  ): Promise<Output> {\n    return run(id, {\n      method: 'get',\n      path: `/fal/queue/requests/${requestId}/response`,\n    });\n  },\n  subscribe,\n};\n"]}