"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storageImpl = void 0;
const tslib_1 = require("tslib");
const config_1 = require("./config");
const request_1 = require("./request");
function isDataUri(uri) {
    // avoid uri parsing if it doesn't start with data:
    if (!uri.startsWith('data:')) {
        return false;
    }
    try {
        const url = new URL(uri);
        return url.protocol === 'data:';
    }
    catch (_) {
        return false;
    }
}
/**
 * Get the file extension from the content type. This is used to generate
 * a file name if the file name is not provided.
 *
 * @param contentType the content type of the file.
 * @returns the file extension or `bin` if the content type is not recognized.
 */
function getExtensionFromContentType(contentType) {
    var _a;
    const [_, fileType] = contentType.split('/');
    return (_a = fileType.split(/[-;]/)[0]) !== null && _a !== void 0 ? _a : 'bin';
}
/**
 * Initiate the upload of a file to the server. This returns the URL to upload
 * the file to and the URL of the file once it is uploaded.
 *
 * @param file the file to upload
 * @returns the URL to upload the file to and the URL of the file once it is uploaded.
 */
function initiateUpload(file) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const contentType = file.type || 'application/octet-stream';
        const filename = file.name || `${Date.now()}.${getExtensionFromContentType(contentType)}`;
        return yield (0, request_1.dispatchRequest)('POST', `https://${(0, config_1.getRestApiUrl)()}/storage/upload/initiate`, {
            content_type: contentType,
            file_name: filename,
        });
    });
}
exports.storageImpl = {
    upload: (file) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { upload_url: uploadUrl, file_url: url } = yield initiateUpload(file);
        const response = yield fetch(uploadUrl, {
            method: 'PUT',
            body: file,
            headers: {
                'Content-Type': file.type || 'application/octet-stream',
            },
        });
        const { responseHandler } = (0, config_1.getConfig)();
        yield responseHandler(response);
        return url;
    }),
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    transformInput: (input) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const promises = Object.entries(input).map(([key, value]) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            if (value instanceof Blob ||
                (typeof value === 'string' && isDataUri(value))) {
                let blob = value;
                // if string is a data uri, convert to blob
                if (typeof value === 'string' && isDataUri(value)) {
                    const response = yield fetch(value);
                    blob = yield response.blob();
                }
                const url = yield exports.storageImpl.upload(blob);
                return [key, url];
            }
            return [key, value];
        }));
        const results = yield Promise.all(promises);
        return Object.fromEntries(results);
    }),
};
//# sourceMappingURL=storage.js.map