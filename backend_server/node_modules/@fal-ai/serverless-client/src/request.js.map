{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../../libs/client/src/request.ts"],"names":[],"mappings":";;;;AAAA,qCAAqC;AACrC,uCAAoD;AAEpD,MAAM,mBAAmB,GACvB,OAAO,SAAS,KAAK,WAAW;IAChC,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,SAAS,MAAK,oBAAoB,CAAC;AAEhD,SAAsB,eAAe,CACnC,MAAc,EACd,SAAiB,EACjB,KAAY;;QAEZ,MAAM,EACJ,WAAW,EAAE,gBAAgB,EAC7B,iBAAiB,EACjB,eAAe,GAChB,GAAG,IAAA,kBAAS,GAAE,CAAC;QAChB,MAAM,SAAS,GAAG,IAAA,mBAAS,GAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,IAAA,sBAAY,GAAE,EAAE,CAAC;QACtE,MAAM,WAAW,GACf,OAAO,gBAAgB,KAAK,UAAU;YACpC,CAAC,CAAC,gBAAgB,EAAE;YACpB,CAAC,CAAC,gBAAgB,CAAC;QAEvB,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,MAAM,iBAAiB,CAAC;YAC/C,GAAG,EAAE,SAAS;SACf,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,OAAO,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9E,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,WAAW,EAAE;YAChD,OAAO,CAAC,IAAI,CACV,gEAAgE;gBAC9D,kDAAkD,CACrD,CAAC;SACH;QACD,MAAM,cAAc,GAAG,4DAClB,UAAU,KACb,MAAM,EAAE,kBAAkB,EAC1B,cAAc,EAAE,kBAAkB,KAC/B,SAAS,GACT,CAAC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC,CACJ,CAAC;QACjB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,gCAC9B,MAAM,EACN,OAAO,EAAE,cAAc,IACpB,CAAC,CAAC,mBAAmB,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,KAC7C,IAAI,EACF,MAAM,CAAC,WAAW,EAAE,KAAK,KAAK,IAAI,KAAK;gBACrC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;gBACvB,CAAC,CAAC,SAAS,IACf,CAAC;QACH,OAAO,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;CAAA;AA3CD,0CA2CC","sourcesContent":["import { getConfig } from './config';\nimport { getUserAgent, isBrowser } from './runtime';\n\nconst isCloudflareWorkers =\n  typeof navigator !== 'undefined' &&\n  navigator?.userAgent === 'Cloudflare-Workers';\n\nexport async function dispatchRequest<Input, Output>(\n  method: string,\n  targetUrl: string,\n  input: Input\n): Promise<Output> {\n  const {\n    credentials: credentialsValue,\n    requestMiddleware,\n    responseHandler,\n  } = getConfig();\n  const userAgent = isBrowser() ? {} : { 'User-Agent': getUserAgent() };\n  const credentials =\n    typeof credentialsValue === 'function'\n      ? credentialsValue()\n      : credentialsValue;\n\n  const { url, headers } = await requestMiddleware({\n    url: targetUrl,\n  });\n  const authHeader = credentials ? { Authorization: `Key ${credentials}` } : {};\n  if (typeof window !== 'undefined' && credentials) {\n    console.warn(\n      \"The fal credentials are exposed in the browser's environment. \" +\n        \"That's not recommended for production use cases.\"\n    );\n  }\n  const requestHeaders = {\n    ...authHeader,\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    ...userAgent,\n    ...(headers ?? {}),\n  } as HeadersInit;\n  const response = await fetch(url, {\n    method,\n    headers: requestHeaders,\n    ...(!isCloudflareWorkers && { mode: 'cors' }),\n    body:\n      method.toLowerCase() !== 'get' && input\n        ? JSON.stringify(input)\n        : undefined,\n  });\n  return await responseHandler(response);\n}\n"]}