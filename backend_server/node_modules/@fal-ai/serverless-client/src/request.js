"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dispatchRequest = void 0;
const tslib_1 = require("tslib");
const config_1 = require("./config");
const runtime_1 = require("./runtime");
const isCloudflareWorkers = typeof navigator !== 'undefined' &&
    (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === 'Cloudflare-Workers';
function dispatchRequest(method, targetUrl, input) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { credentials: credentialsValue, requestMiddleware, responseHandler, } = (0, config_1.getConfig)();
        const userAgent = (0, runtime_1.isBrowser)() ? {} : { 'User-Agent': (0, runtime_1.getUserAgent)() };
        const credentials = typeof credentialsValue === 'function'
            ? credentialsValue()
            : credentialsValue;
        const { url, headers } = yield requestMiddleware({
            url: targetUrl,
        });
        const authHeader = credentials ? { Authorization: `Key ${credentials}` } : {};
        if (typeof window !== 'undefined' && credentials) {
            console.warn("The fal credentials are exposed in the browser's environment. " +
                "That's not recommended for production use cases.");
        }
        const requestHeaders = Object.assign(Object.assign(Object.assign(Object.assign({}, authHeader), { Accept: 'application/json', 'Content-Type': 'application/json' }), userAgent), (headers !== null && headers !== void 0 ? headers : {}));
        const response = yield fetch(url, Object.assign(Object.assign({ method, headers: requestHeaders }, (!isCloudflareWorkers && { mode: 'cors' })), { body: method.toLowerCase() !== 'get' && input
                ? JSON.stringify(input)
                : undefined }));
        return yield responseHandler(response);
    });
}
exports.dispatchRequest = dispatchRequest;
//# sourceMappingURL=request.js.map