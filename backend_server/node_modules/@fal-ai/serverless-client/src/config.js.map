{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../libs/client/src/config.ts"],"names":[],"mappings":";;;AAAA,6CAIsB;AAEtB,yCAAoD;AAcpD;;;;;GAKG;AACH,SAAS,eAAe;IACtB,OAAO,CACL,OAAO,OAAO,KAAK,WAAW;QAC9B,OAAO,CAAC,GAAG;QACX,CAAC,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,WAAW;YACzC,CAAC,OAAO,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,WAAW;gBAC5C,OAAO,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,WAAW,CAAC,CAAC,CACxD,CAAC;AACJ,CAAC;AAEM,MAAM,kBAAkB,GAAwB,GAAG,EAAE;IAC1D,IAAI,CAAC,eAAe,EAAE,EAAE;QACtB,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,WAAW,EAAE;QAC9C,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;KAC5B;IAED,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;AACnE,CAAC,CAAC;AAVW,QAAA,kBAAkB,sBAU7B;AAEF;;;;;GAKG;AACH,SAAS,cAAc;IACrB,MAAM,IAAI,GAAG,sBAAsB,CAAC;IACpC,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,GAAG,EAAE;QACjD,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,IAAI,CAAC;KACrC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,cAAc,GAAoB;IACtC,IAAI,EAAE,cAAc,EAAE;IACtB,WAAW,EAAE,0BAAkB;IAC/B,iBAAiB,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;IACxD,eAAe,EAAE,iCAAsB;CACxC,CAAC;AAEF,IAAI,aAA6B,CAAC;AAElC;;;;GAIG;AACH,SAAgB,MAAM,CAAC,MAAc;IACnC,aAAa,GAAG,gCAAK,cAAc,GAAK,MAAM,CAAoB,CAAC;IACnE,IAAI,MAAM,CAAC,QAAQ,EAAE;QACnB,aAAa,mCACR,aAAa,KAChB,iBAAiB,EAAE,IAAA,2BAAc,EAC/B,aAAa,CAAC,iBAAiB,EAC/B,IAAA,sBAAS,EAAC,EAAE,SAAS,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAC1C,GACF,CAAC;KACH;AACH,CAAC;AAXD,wBAWC;AAED;;;;GAIG;AACH,SAAgB,SAAS;IACvB,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;QAC/D,OAAO,kBAAK,cAAc,CAAoB,CAAC;KAChD;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;AAND,8BAMC;AAED;;GAEG;AACH,SAAgB,aAAa;IAC3B,MAAM,EAAE,IAAI,EAAE,GAAG,SAAS,EAAE,CAAC;IAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACzC,CAAC;AAHD,sCAGC","sourcesContent":["import {\n  withMiddleware,\n  withProxy,\n  type RequestMiddleware,\n} from './middleware';\nimport type { ResponseHandler } from './response';\nimport { defaultResponseHandler } from './response';\n\nexport type CredentialsResolver = () => string | undefined;\n\nexport type Config = {\n  credentials?: undefined | string | CredentialsResolver;\n  host?: string;\n  proxyUrl?: string;\n  requestMiddleware?: RequestMiddleware;\n  responseHandler?: ResponseHandler<any>;\n};\n\nexport type RequiredConfig = Required<Config>;\n\n/**\n * Checks if the required FAL environment variables are set.\n *\n * @returns `true` if the required environment variables are set,\n * `false` otherwise.\n */\nfunction hasEnvVariables(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process.env &&\n    (typeof process.env.FAL_KEY !== 'undefined' ||\n      (typeof process.env.FAL_KEY_ID !== 'undefined' &&\n        typeof process.env.FAL_KEY_SECRET !== 'undefined'))\n  );\n}\n\nexport const credentialsFromEnv: CredentialsResolver = () => {\n  if (!hasEnvVariables()) {\n    return undefined;\n  }\n\n  if (typeof process.env.FAL_KEY !== 'undefined') {\n    return process.env.FAL_KEY;\n  }\n\n  return `${process.env.FAL_KEY_ID}:${process.env.FAL_KEY_SECRET}`;\n};\n\n/**\n * Get the default host for the fal-serverless gateway endpoint.\n * @private\n * @returns the default host. Depending on the platform it can default to\n * the environment variable `FAL_HOST`.\n */\nfunction getDefaultHost(): string {\n  const host = 'gateway.alpha.fal.ai';\n  if (typeof process !== 'undefined' && process.env) {\n    return process.env.FAL_HOST || host;\n  }\n  return host;\n}\n\nconst DEFAULT_CONFIG: Partial<Config> = {\n  host: getDefaultHost(),\n  credentials: credentialsFromEnv,\n  requestMiddleware: (request) => Promise.resolve(request),\n  responseHandler: defaultResponseHandler,\n};\n\nlet configuration: RequiredConfig;\n\n/**\n * Configures the fal serverless client.\n *\n * @param config the new configuration.\n */\nexport function config(config: Config) {\n  configuration = { ...DEFAULT_CONFIG, ...config } as RequiredConfig;\n  if (config.proxyUrl) {\n    configuration = {\n      ...configuration,\n      requestMiddleware: withMiddleware(\n        configuration.requestMiddleware,\n        withProxy({ targetUrl: config.proxyUrl })\n      ),\n    };\n  }\n}\n\n/**\n * Get the current fal serverless client configuration.\n *\n * @returns the current client configuration.\n */\nexport function getConfig(): RequiredConfig {\n  if (!configuration) {\n    console.info('Using default configuration for the fal client');\n    return { ...DEFAULT_CONFIG } as RequiredConfig;\n  }\n  return configuration;\n}\n\n/**\n * @returns the URL of the fal serverless rest api endpoint.\n */\nexport function getRestApiUrl(): string {\n  const { host } = getConfig();\n  return host.replace('gateway', 'rest');\n}\n"]}