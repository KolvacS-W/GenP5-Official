{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../../libs/client/src/storage.ts"],"names":[],"mappings":";;;;AAAA,qCAAoD;AACpD,uCAA4C;AA4B5C,SAAS,SAAS,CAAC,GAAW;IAC5B,mDAAmD;IACnD,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;QAC5B,OAAO,KAAK,CAAC;KACd;IACD,IAAI;QACF,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QACzB,OAAO,GAAG,CAAC,QAAQ,KAAK,OAAO,CAAC;KACjC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAYD;;;;;;GAMG;AACH,SAAS,2BAA2B,CAAC,WAAmB;;IACtD,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7C,OAAO,MAAA,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,mCAAI,KAAK,CAAC;AAC5C,CAAC;AAED;;;;;;GAMG;AACH,SAAe,cAAc,CAAC,IAAU;;QACtC,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,IAAI,0BAA0B,CAAC;QAC5D,MAAM,QAAQ,GACZ,IAAI,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,IAAI,2BAA2B,CAAC,WAAW,CAAC,EAAE,CAAC;QAC3E,OAAO,MAAM,IAAA,yBAAe,EAC1B,MAAM,EACN,WAAW,IAAA,sBAAa,GAAE,0BAA0B,EACpD;YACE,YAAY,EAAE,WAAW;YACzB,SAAS,EAAE,QAAQ;SACpB,CACF,CAAC;IACJ,CAAC;CAAA;AAKY,QAAA,WAAW,GAAmB;IACzC,MAAM,EAAE,CAAO,IAAU,EAAE,EAAE;QAC3B,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,MAAM,cAAc,CAAC,IAAI,CAAC,CAAC;QAC5E,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,SAAS,EAAE;YACtC,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,IAAI;YACV,OAAO,EAAE;gBACP,cAAc,EAAE,IAAI,CAAC,IAAI,IAAI,0BAA0B;aACxD;SACF,CAAC,CAAC;QACH,MAAM,EAAE,eAAe,EAAE,GAAG,IAAA,kBAAS,GAAE,CAAC;QACxC,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,GAAG,CAAC;IACb,CAAC,CAAA;IAED,8DAA8D;IAC9D,cAAc,EAAE,CAAO,KAA0B,EAAE,EAAE;QACnD,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAO,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAChE,IACE,KAAK,YAAY,IAAI;gBACrB,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,EAC/C;gBACA,IAAI,IAAI,GAAG,KAAK,CAAC;gBACjB,2CAA2C;gBAC3C,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;oBACjD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC;oBACpC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;iBAC9B;gBACD,MAAM,GAAG,GAAG,MAAM,mBAAW,CAAC,MAAM,CAAC,IAAY,CAAC,CAAC;gBACnD,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aACnB;YACD,OAAO,CAAC,GAAG,EAAE,KAAK,CAAiB,CAAC;QACtC,CAAC,CAAA,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC,CAAA;CACF,CAAC","sourcesContent":["import { getConfig, getRestApiUrl } from './config';\nimport { dispatchRequest } from './request';\n\n/**\n * File support for the client. This interface establishes the contract for\n * uploading files to the server and transforming the input to replace file\n * objects with URLs.\n */\nexport interface StorageSupport {\n  /**\n   * Upload a file to the server. Returns the URL of the uploaded file.\n   * @param file the file to upload\n   * @param options optional parameters, such as custom file name\n   * @returns the URL of the uploaded file\n   */\n  upload: (file: Blob) => Promise<string>;\n\n  /**\n   * Transform the input to replace file objects with URLs. This is used\n   * to transform the input before sending it to the server and ensures\n   * that the server receives URLs instead of file objects.\n   *\n   * @param input the input to transform.\n   * @returns the transformed input.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transformInput: (input: Record<string, any>) => Promise<Record<string, any>>;\n}\n\nfunction isDataUri(uri: string): boolean {\n  // avoid uri parsing if it doesn't start with data:\n  if (!uri.startsWith('data:')) {\n    return false;\n  }\n  try {\n    const url = new URL(uri);\n    return url.protocol === 'data:';\n  } catch (_) {\n    return false;\n  }\n}\n\ntype InitiateUploadResult = {\n  file_url: string;\n  upload_url: string;\n};\n\ntype InitiateUploadData = {\n  file_name: string;\n  content_type: string | null;\n};\n\n/**\n * Get the file extension from the content type. This is used to generate\n * a file name if the file name is not provided.\n *\n * @param contentType the content type of the file.\n * @returns the file extension or `bin` if the content type is not recognized.\n */\nfunction getExtensionFromContentType(contentType: string): string {\n  const [_, fileType] = contentType.split('/');\n  return fileType.split(/[-;]/)[0] ?? 'bin';\n}\n\n/**\n * Initiate the upload of a file to the server. This returns the URL to upload\n * the file to and the URL of the file once it is uploaded.\n *\n * @param file the file to upload\n * @returns the URL to upload the file to and the URL of the file once it is uploaded.\n */\nasync function initiateUpload(file: Blob): Promise<InitiateUploadResult> {\n  const contentType = file.type || 'application/octet-stream';\n  const filename =\n    file.name || `${Date.now()}.${getExtensionFromContentType(contentType)}`;\n  return await dispatchRequest<InitiateUploadData, InitiateUploadResult>(\n    'POST',\n    `https://${getRestApiUrl()}/storage/upload/initiate`,\n    {\n      content_type: contentType,\n      file_name: filename,\n    }\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype KeyValuePair = [string, any];\n\nexport const storageImpl: StorageSupport = {\n  upload: async (file: Blob) => {\n    const { upload_url: uploadUrl, file_url: url } = await initiateUpload(file);\n    const response = await fetch(uploadUrl, {\n      method: 'PUT',\n      body: file,\n      headers: {\n        'Content-Type': file.type || 'application/octet-stream',\n      },\n    });\n    const { responseHandler } = getConfig();\n    await responseHandler(response);\n    return url;\n  },\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transformInput: async (input: Record<string, any>) => {\n    const promises = Object.entries(input).map(async ([key, value]) => {\n      if (\n        value instanceof Blob ||\n        (typeof value === 'string' && isDataUri(value))\n      ) {\n        let blob = value;\n        // if string is a data uri, convert to blob\n        if (typeof value === 'string' && isDataUri(value)) {\n          const response = await fetch(value);\n          blob = await response.blob();\n        }\n        const url = await storageImpl.upload(blob as Blob);\n        return [key, url];\n      }\n      return [key, value] as KeyValuePair;\n    });\n    const results = await Promise.all(promises);\n    return Object.fromEntries(results);\n  },\n};\n"]}