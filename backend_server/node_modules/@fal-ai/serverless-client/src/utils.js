"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isReact = exports.throttle = exports.isValidUrl = exports.isUUIDv4 = void 0;
function isUUIDv4(id) {
    return (typeof id === 'string' &&
        id.length === 36 &&
        id[14] === '4' &&
        ['8', '9', 'a', 'b'].includes(id[19]));
}
exports.isUUIDv4 = isUUIDv4;
function isValidUrl(url) {
    try {
        const parsedUrl = new URL(url);
        return parsedUrl.hostname.endsWith('fal.ai');
    }
    catch (_) {
        return false;
    }
}
exports.isValidUrl = isValidUrl;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function throttle(func, limit, leading = false) {
    let lastFunc;
    let lastRan;
    return (...args) => {
        if (!lastRan && leading) {
            func(...args);
            lastRan = Date.now();
        }
        else {
            if (lastFunc) {
                clearTimeout(lastFunc);
            }
            lastFunc = setTimeout(() => {
                if (Date.now() - lastRan >= limit) {
                    func(...args);
                    lastRan = Date.now();
                }
            }, limit - (Date.now() - lastRan));
        }
    };
}
exports.throttle = throttle;
let isRunningInReact;
/**
 * Not really the most optimal way to detect if we're running in React,
 * but the idea here is that we can support multiple rendering engines
 * (starting with React), with all their peculiarities, without having
 * to add a dependency or creating custom integrations (e.g. custom hooks).
 *
 * Yes, a bit of magic to make things works out-of-the-box.
 * @returns `true` if running in React, `false` otherwise.
 */
function isReact() {
    if (isRunningInReact === undefined) {
        const stack = new Error().stack;
        isRunningInReact =
            !!stack &&
                (stack.includes('node_modules/react-dom/') ||
                    stack.includes('node_modules/next/'));
    }
    return isRunningInReact;
}
exports.isReact = isReact;
//# sourceMappingURL=utils.js.map